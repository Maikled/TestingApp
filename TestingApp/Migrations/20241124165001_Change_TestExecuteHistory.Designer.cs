// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingApp.Database;

#nullable disable

namespace TestingApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241124165001_Change_TestExecuteHistory")]
    partial class Change_TestExecuteHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TestingApp.Areas.Tasking.Models.TestExecuteHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Errors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OwnerUserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("TestsExecuteHistories");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Identity.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.Source", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerTaskID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.TaskTesting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("OwnerUserID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.Test", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TaskTestingID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TaskTestingID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.TaskTesting", b =>
                {
                    b.HasOne("TestingApp.Core.Models.Identity.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.Test", b =>
                {
                    b.HasOne("TestingApp.Core.Models.Tests.TaskTesting", null)
                        .WithMany("Tests")
                        .HasForeignKey("TaskTestingID");
                });

            modelBuilder.Entity("TestingApp.Core.Models.Tests.TaskTesting", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
